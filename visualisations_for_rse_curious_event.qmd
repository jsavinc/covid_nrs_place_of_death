---
title: "Visualisations for RSE Curious event"
author: "Jan Savinc"
format: html
editor_options: 
  chunk_output_type: console
---

# Load packages

```{r, warning=FALSE, message=FALSE}
## install packages from github if not yet available!
# remotes::install_github("datasciencescotland/opendatascot", force = TRUE)
# remotes::install_github("Health-SocialCare-Scotland/phsmethods", force = TRUE)

library(tidyverse)  # for tidy workflow
library(opendatascot)  # importing data from ScotGov open data website
library(phsmethods)  # methods for working with PHS data
library(readxl)  # for reading excel files
# library(SPARQL)  # taken care of by opendatascot
library(lubridate)  # dealing with dates
library(janitor)  # for cleaning column names
library(ISOweek)  # for computing date from ISO week number + year
library(sf)  # for mapping
library(ggrepel)  # for 'mapping'repelling' labels/texst in ggplot
library(patchwork)  # for assembling plots
library(extrafont)  # for working with fonts
library(openxlsx)  # for creating xlsx files
library(knitr)  # for displaying tables in rmd
library(lemon)  # for showing axis & axis labels in every facet in ggplot
library(ggtext)  # for showing coloured title text

## load functions
source("./functions.R")
```


# Copyright attribution

All data used for this study were obtained from the National Records Scotland (NRS) and are Â© Crown copyright, 2020; the details of the licence can be viewed on the [Open Government Licence website](http://www.nationalarchives.gov.uk/doc/open-government-licence/open-government-licence.htm)

# Dates represent event registration, not occurrence!

From NRS website:
  
  > All routine vital events information we publish is based on the date of registration, not the date on which the event occurred. Inevitably, of course, there are delays between the occurrence of an event and its registration.


# Load most recent data

```{r}
load(file = "./workspace.RData")
```


# Set up output directory

Because data are updated on a weekly basis, we'll have a separate directory for every week the data are updated:

```{r}
dir_event <- file.path(dir_outputs, "rse_curious_2023")
if (!dir.exists(dir_event)) dir.create(dir_event)
```


# Download & process monthly data

This section maybe belongs in the earlier pipeline?

NRS publish monthly mortality reports broken down by various variables, including Place of death over years, available since 2005.

These are updated monthly, and reported for the previous month, so as of 12 July 2023, the latest report was published in June, and contains data for up to May 2023.]

Note also that these exhibit small differences from the weekly data - the weekly data are reported to the ISO 8061 standard, meaning that week 1 of 2020 starts in 2019, for example.

```{r}
monthly_report_url <- "https://www.nrscotland.gov.uk/files//statistics/vital-events/monthly-mortality/monthly-mortality-may-23-tab-5.xlsx"

temporary_report_path <- tempfile()
download.file(url = monthly_report_url, destfile = temporary_report_path, mode = "wb")

# excel_sheets(temporary_report_path)
# deaths_monthly <- read_excel(temporary_report_path, sheet = 5)  # more reliable to use name, though that is liable to change
deaths_monthly <- 
  read_excel(temporary_report_path, sheet = "Table M5", skip = 4) %>%
  clean_names() %>%
  rename(
    year = year_of_occurrence,
    month = month_of_occurrence,
    place_of_death = location
  ) %>%
  select(-provisional_data_marker) %>%
  mutate(
    place_of_death = order_of_place_of_death_levels[match(x = str_sub(place_of_death,1,4), table = str_sub(order_of_place_of_death_levels, 1, 4))] %>%
      factor(., levels = order_of_place_of_death_levels)
  )
```



# Visualisations

## Common elements

```{r}
loadfonts(device="win")  # load imported fonts
# Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.27/bin/gswin64c.exe")  # set the location of the GS file  # this not needed, just use device=device_cairo for pdfs in ggsave
windowsFonts("Calibri" = windowsFont("Calibri"))  # to suppress the multiple error messages

theme_set(theme_minimal(base_size = 12) +
            theme(panel.grid.minor = element_blank(),
                  axis.title.y = element_text(margin = margin(0, 20, 0, 0)),  # remove gap to the left of y axis title and below the x axis title
                  axis.title.x = element_text(margin = margin(20, 0, 0, 0)),
                  text=element_text(family="Calibri"),
                  axis.text = element_text(size = 9)
            ))


date_range_text <- glue::glue("Data from w/c {format(earliest_date, '%d %B %Y')} to w/c {format(most_recent_date_available_2023, '%d %B %Y')} (inclusive).")
date_range_text_disaggregated <- glue::glue("Data from w/c {format(earliest_date, '%d %B %Y')} to w/c {format(most_recent_date_available_2023_disaggregated, '%d %B %Y')} (inclusive).")

dashed_line_historical_range_text <- "Range of deaths 2015-19 shown as shaded area; mean shown as dashed line."

only_2020_text <- glue::glue("Data from 2020 included, starting with w/c {format(earliest_date)}.")
only_2023_text <- glue::glue("Data for 2023 only include weeks 1-{format(weeks_available_2023)} (w/c {format(most_recent_date_available_2023)}).")
only_2023_disaggregated_text <- glue::glue("Data for 2023 only include weeks 1-{format(weeks_available_2023_disaggregated)} (w/c {format(most_recent_date_available_2023_disaggregated)}).")

source_nrs_text <- "Source: National Records of Scotland"
source_phs_text <- "Source: Public Health Scotland"

crude_rate_text <- "Total cases = crude cumulative positive cases over time."

death_registrations_text <- "Note: all figures are based on date of registration."

vertical_line_text <- "Vertical dashed line at week number 54 represents start of 2021."

five_year_historical_mean <- "For 2020-2021 data, the 5-year historical period is 2015-2019; for 2022, the period is 2016-2019 + 2021, skipping 2020."

vertical_scale_differs_between_panels_text <- "Note: vertical axis not on the same scale between panels!"

# removed_other_category_text <- glue::glue("Excluding 'Other' institutional place of death, N={merged_deaths_overall %>% filter(sex == 'all' & age == 'all' & place_of_death == 'Other') %>% .$deaths_all_causes %>% sum} for weeks 1-{max(merged_deaths_overall %>% filter(year==2020) %>% .$week_number)} in 2020 and 1-{max(merged_deaths_overall %>% filter(year==2021) %>% .$week_number)} in 2021.")
removed_other_category_text <- glue::glue("Excluding 'Other' institutional place of death.")

historic_period_2015_2019_text <- "Historic mean & range for 2015-2019 throughout."
historic_period_2022_text <- "2020-21 use 2015-2019 historic mean & range; 2022 uses 2016-2019 & 2021."

```

# Monthly place of death image

Monthly deaths might be too detailed...

```{r}
deaths_monthly %>%
  mutate(
    date = ymd(glue::glue("{year}-{month}-01"))
  ) %>%
  filter(place_of_death == "Home & other non-institution") %>%
  filter(year >= 2015) %>%
  # ggplot(aes(x = paste(year,month,sep="-"), number_of_deaths)) +
  ggplot(aes(x = date, y = number_of_deaths)) +
  add_vertical_lines_and_annotations_for_years(years = 2015:current_year, y_annotation = 30) +
  geom_line() +
  # facet_grid(place_of_death~.) +
  theme(
    legend.position = "top",
    legend.title = element_blank(),
    axis.text.x = element_text(angle = 60, colour = "gray40", vjust=1, hjust=1)
  ) +
  labs(x = NULL,
       y = "Deaths (N)"
       ) +
  NULL
```

# Annual home deaths

```{r}
deaths_annual <-
  deaths_monthly %>%
  group_by(year, place_of_death) %>%
  summarise(
    number_of_deaths = sum(number_of_deaths),
    .groups = "drop"
  )

annual_deaths_by_place_incl_covid <-
  bind_rows(
    ## 2015-2019
    merged_proportions_of_deaths_by_place %>%
    select(year, place_of_death, number_of_deaths) %>%
    filter(year %in% 2015:2019) %>%
    mutate(deaths_non_covid = number_of_deaths, deaths_covid_related = 0)
    ,
    ## 2020 onwards
    total_deaths_overall %>%
      select(year, place_of_death, number_of_deaths = deaths_all_causes, deaths_covid_related) %>%
      distinct %>%
      mutate(deaths_non_covid = number_of_deaths - deaths_covid_related)
  )

# merged_proportions_of_deaths_by_place %>%
#   select(year, place_of_death, number_of_deaths_from_weekly = number_of_deaths) %>%
#   left_join(deaths_annual, by = c("year","place_of_death")) %>%
#   filter(place_of_death!="All") %>%
#   ggplot(aes(x=year, colour = place_of_death)) +
#   geom_line(aes(y = number_of_deaths), linetype = "solid") +
#   geom_point(aes(y = number_of_deaths), shape = 10) +
#   geom_line(aes(y = number_of_deaths_from_weekly), linetype = "dashed") +
#   geom_point(aes(y = number_of_deaths_from_weekly), shape = 15) +
#   NULL
  

(fig_annual_home_deaths <- 
  annual_deaths_by_place_incl_covid %>%
  filter(place_of_death == "Home & other non-institution") %>%
  filter(year >= 2015 & year != 2023) %>%
  pivot_longer(cols = c(deaths_covid_related, deaths_non_covid), names_to = "death_type", values_to = "deaths") %>%
  mutate(bin_pandemic = year >= 2020) %>%
  ggplot(aes(x = year, y = deaths, fill = death_type)) +
  geom_col() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    axis.text.x = element_text(angle = 60, colour = "gray40", vjust=1, hjust=1), 
    aspect.ratio = 0.5
  ) +
  scale_x_continuous(breaks = 2015:2022) +
  scale_y_continuous(labels = scales::comma) +
  # scale_fill_manual(values = scales::viridis_pal(option = "D")(3)[c(3,1)],labels = c("Covid-related", "Non-covid")) +
  scale_fill_manual(values = c("red","grey50"),labels = c("Covid-related", "Non-covid")) +
  labs(x = NULL,
       y = NULL,
       title = "The new normal:\nHome deaths increased by a third during the pandemic...",
       subtitle = "...and remain increased in 2023!"
       ) +
  NULL
)

fig_annual_home_deaths %>%
save_output_file(filename = file.path(dir_event, paste0(c("fig_annual_home_deaths", latest_data_modified_date), collapse = "_")), extensions = c(".pdf",".png"), plot = ., width = 20, height = 10, dpi = 300, units = "cm")
```

